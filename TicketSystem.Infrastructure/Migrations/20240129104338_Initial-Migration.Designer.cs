// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketSystem.Infrastructure.Context;

#nullable disable

namespace TicketSystem.Infrastructure.Migrations
{
    [DbContext(typeof(TicketSystemDbContext))]
    [Migration("20240129104338_Initial-Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shared.Models.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccuredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("TicketSystem.Domain.Tickets.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssingTo")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AssingTo");

                    b.Property<decimal>("CompletedWork")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Describtion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ModifierId");

                    b.Property<decimal>("OriginalEstimate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RemainingWork")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("TicketSystem.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatorId");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdentityUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ModifierId");

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("TicketSystem.Domain.Tickets.Ticket", b =>
                {
                    b.OwnsMany("TicketSystem.Domain.Tickets.Entities.Comment", "Comments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<Guid>("CreatorId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("CreatorId");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("datetime2");

                            b1.Property<Guid?>("ModifierId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ModifierId");

                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("TicketId");

                            b1.HasKey("Id");

                            b1.HasIndex("TicketId");

                            b1.ToTable("Comments", (string)null);

                            b1.WithOwner("Ticket")
                                .HasForeignKey("TicketId");

                            b1.OwnsMany("TicketSystem.Domain.Common.Primitives.DomainEvent", "DomainEvents", b2 =>
                                {
                                    b2.Property<Guid>("CommentId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("CommentId", "Id");

                                    b2.ToTable("Comments_DomainEvents");

                                    b2.WithOwner()
                                        .HasForeignKey("CommentId");
                                });

                            b1.Navigation("DomainEvents");

                            b1.Navigation("Ticket");
                        });

                    b.OwnsMany("TicketSystem.Domain.Common.Primitives.DomainEvent", "DomainEvents", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("TicketId", "Id");

                            b1.ToTable("Tickets_DomainEvents");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsMany("TicketSystem.Domain.Tickets.ValueObjects.TicketHistory", "TicketHistories", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("TicketId");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("AssingTo")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("AssingTo");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<Guid>("CreatorId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("CreatorId");

                            b1.Property<int>("Status")
                                .HasColumnType("int")
                                .HasColumnName("Status");

                            b1.HasKey("TicketId", "Id");

                            b1.ToTable("TicketHistories", (string)null);

                            b1.WithOwner("Ticket")
                                .HasForeignKey("TicketId");

                            b1.Navigation("Ticket");
                        });

                    b.Navigation("Comments");

                    b.Navigation("DomainEvents");

                    b.Navigation("TicketHistories");
                });

            modelBuilder.Entity("TicketSystem.Domain.Users.User", b =>
                {
                    b.OwnsOne("TicketSystem.Domain.Common.Models.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("TicketSystem.Domain.Common.Models.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Phone");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("TicketSystem.Domain.Common.Primitives.DomainEvent", "DomainEvents", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("Users_DomainEvents");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("DomainEvents");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
